// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/modern-questions-team-13/orange-stock-market/internal/model"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUser) Create(ctx context.Context, login string, wealth int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, login, wealth)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserMockRecorder) Create(ctx, login, wealth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), ctx, login, wealth)
}

// Get mocks base method.
func (m *MockUser) Get(ctx context.Context, id int) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUser)(nil).Get), ctx, id)
}

// TopUp mocks base method.
func (m *MockUser) TopUp(ctx context.Context, id, wealth int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopUp", ctx, id, wealth)
	ret0, _ := ret[0].(error)
	return ret0
}

// TopUp indicates an expected call of TopUp.
func (mr *MockUserMockRecorder) TopUp(ctx, id, wealth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopUp", reflect.TypeOf((*MockUser)(nil).TopUp), ctx, id, wealth)
}

// Withdraw mocks base method.
func (m *MockUser) Withdraw(ctx context.Context, id, wealth int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, id, wealth)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockUserMockRecorder) Withdraw(ctx, id, wealth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockUser)(nil).Withdraw), ctx, id, wealth)
}

// MockSale is a mock of Sale interface.
type MockSale struct {
	ctrl     *gomock.Controller
	recorder *MockSaleMockRecorder
}

// MockSaleMockRecorder is the mock recorder for MockSale.
type MockSaleMockRecorder struct {
	mock *MockSale
}

// NewMockSale creates a new mock instance.
func NewMockSale(ctrl *gomock.Controller) *MockSale {
	mock := &MockSale{ctrl: ctrl}
	mock.recorder = &MockSaleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSale) EXPECT() *MockSaleMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSale) Create(ctx context.Context, userId, companyId, price int) (model.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userId, companyId, price)
	ret0, _ := ret[0].(model.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSaleMockRecorder) Create(ctx, userId, companyId, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSale)(nil).Create), ctx, userId, companyId, price)
}

// Delete mocks base method.
func (m *MockSale) Delete(ctx context.Context, id int) (model.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(model.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSaleMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSale)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockSale) Get(ctx context.Context, id int) (model.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(model.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSaleMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSale)(nil).Get), ctx, id)
}

// GetAllSales mocks base method.
func (m *MockSale) GetAllSales(ctx context.Context, companyId int, limit, offset uint64) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSales", ctx, companyId, limit, offset)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSales indicates an expected call of GetAllSales.
func (mr *MockSaleMockRecorder) GetAllSales(ctx, companyId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSales", reflect.TypeOf((*MockSale)(nil).GetAllSales), ctx, companyId, limit, offset)
}

// GetSales mocks base method.
func (m *MockSale) GetSales(ctx context.Context, companyId, maxPrice int, limit uint64) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSales", ctx, companyId, maxPrice, limit)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSales indicates an expected call of GetSales.
func (mr *MockSaleMockRecorder) GetSales(ctx, companyId, maxPrice, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSales", reflect.TypeOf((*MockSale)(nil).GetSales), ctx, companyId, maxPrice, limit)
}

// MockPortfolio is a mock of Portfolio interface.
type MockPortfolio struct {
	ctrl     *gomock.Controller
	recorder *MockPortfolioMockRecorder
}

// MockPortfolioMockRecorder is the mock recorder for MockPortfolio.
type MockPortfolioMockRecorder struct {
	mock *MockPortfolio
}

// NewMockPortfolio creates a new mock instance.
func NewMockPortfolio(ctrl *gomock.Controller) *MockPortfolio {
	mock := &MockPortfolio{ctrl: ctrl}
	mock.recorder = &MockPortfolioMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortfolio) EXPECT() *MockPortfolioMockRecorder {
	return m.recorder
}

// AddStock mocks base method.
func (m *MockPortfolio) AddStock(ctx context.Context, userId, companyId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStock", ctx, userId, companyId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStock indicates an expected call of AddStock.
func (mr *MockPortfolioMockRecorder) AddStock(ctx, userId, companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStock", reflect.TypeOf((*MockPortfolio)(nil).AddStock), ctx, userId, companyId)
}

// Create mocks base method.
func (m *MockPortfolio) Create(ctx context.Context, userId, companyId, count int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userId, companyId, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPortfolioMockRecorder) Create(ctx, userId, companyId, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPortfolio)(nil).Create), ctx, userId, companyId, count)
}

// Get mocks base method.
func (m *MockPortfolio) Get(ctx context.Context, userId int) ([]model.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userId)
	ret0, _ := ret[0].([]model.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPortfolioMockRecorder) Get(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPortfolio)(nil).Get), ctx, userId)
}

// RemoveStock mocks base method.
func (m *MockPortfolio) RemoveStock(ctx context.Context, userId, companyId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStock", ctx, userId, companyId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveStock indicates an expected call of RemoveStock.
func (mr *MockPortfolioMockRecorder) RemoveStock(ctx, userId, companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStock", reflect.TypeOf((*MockPortfolio)(nil).RemoveStock), ctx, userId, companyId)
}

// MockBuy is a mock of Buy interface.
type MockBuy struct {
	ctrl     *gomock.Controller
	recorder *MockBuyMockRecorder
}

// MockBuyMockRecorder is the mock recorder for MockBuy.
type MockBuyMockRecorder struct {
	mock *MockBuy
}

// NewMockBuy creates a new mock instance.
func NewMockBuy(ctrl *gomock.Controller) *MockBuy {
	mock := &MockBuy{ctrl: ctrl}
	mock.recorder = &MockBuyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuy) EXPECT() *MockBuyMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBuy) Create(ctx context.Context, userId, companyId, price int) (model.Buy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userId, companyId, price)
	ret0, _ := ret[0].(model.Buy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBuyMockRecorder) Create(ctx, userId, companyId, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBuy)(nil).Create), ctx, userId, companyId, price)
}

// Delete mocks base method.
func (m *MockBuy) Delete(ctx context.Context, id int) (model.Buy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(model.Buy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockBuyMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBuy)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockBuy) Get(ctx context.Context, id int) (model.Buy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(model.Buy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBuyMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBuy)(nil).Get), ctx, id)
}

// GetAllBuys mocks base method.
func (m *MockBuy) GetAllBuys(ctx context.Context, companyId int, limit, offset uint64) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBuys", ctx, companyId, limit, offset)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBuys indicates an expected call of GetAllBuys.
func (mr *MockBuyMockRecorder) GetAllBuys(ctx, companyId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBuys", reflect.TypeOf((*MockBuy)(nil).GetAllBuys), ctx, companyId, limit, offset)
}

// GetBuys mocks base method.
func (m *MockBuy) GetBuys(ctx context.Context, companyId, minPrice int, limit uint64) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuys", ctx, companyId, minPrice, limit)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuys indicates an expected call of GetBuys.
func (mr *MockBuyMockRecorder) GetBuys(ctx, companyId, minPrice, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuys", reflect.TypeOf((*MockBuy)(nil).GetBuys), ctx, companyId, minPrice, limit)
}

// MockOperation is a mock of Operation interface.
type MockOperation struct {
	ctrl     *gomock.Controller
	recorder *MockOperationMockRecorder
}

// MockOperationMockRecorder is the mock recorder for MockOperation.
type MockOperationMockRecorder struct {
	mock *MockOperation
}

// NewMockOperation creates a new mock instance.
func NewMockOperation(ctrl *gomock.Controller) *MockOperation {
	mock := &MockOperation{ctrl: ctrl}
	mock.recorder = &MockOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperation) EXPECT() *MockOperationMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOperation) Create(ctx context.Context, buyerId, sellerId, companyId, price int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, buyerId, sellerId, companyId, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOperationMockRecorder) Create(ctx, buyerId, sellerId, companyId, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOperation)(nil).Create), ctx, buyerId, sellerId, companyId, price)
}

// MockSecret is a mock of Secret interface.
type MockSecret struct {
	ctrl     *gomock.Controller
	recorder *MockSecretMockRecorder
}

// MockSecretMockRecorder is the mock recorder for MockSecret.
type MockSecretMockRecorder struct {
	mock *MockSecret
}

// NewMockSecret creates a new mock instance.
func NewMockSecret(ctrl *gomock.Controller) *MockSecret {
	mock := &MockSecret{ctrl: ctrl}
	mock.recorder = &MockSecretMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecret) EXPECT() *MockSecretMockRecorder {
	return m.recorder
}

// GetUserId mocks base method.
func (m *MockSecret) GetUserId(ctx context.Context, token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", ctx, token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockSecretMockRecorder) GetUserId(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockSecret)(nil).GetUserId), ctx, token)
}

// SetToken mocks base method.
func (m *MockSecret) SetToken(ctx context.Context, id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetToken", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetToken indicates an expected call of SetToken.
func (mr *MockSecretMockRecorder) SetToken(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockSecret)(nil).SetToken), ctx, id)
}

// MockCompany is a mock of Company interface.
type MockCompany struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyMockRecorder
}

// MockCompanyMockRecorder is the mock recorder for MockCompany.
type MockCompanyMockRecorder struct {
	mock *MockCompany
}

// NewMockCompany creates a new mock instance.
func NewMockCompany(ctrl *gomock.Controller) *MockCompany {
	mock := &MockCompany{ctrl: ctrl}
	mock.recorder = &MockCompanyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompany) EXPECT() *MockCompanyMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockCompany) GetAll(ctx context.Context) ([]model.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]model.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCompanyMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCompany)(nil).GetAll), ctx)
}
